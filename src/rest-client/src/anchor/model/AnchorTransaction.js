/*
 * Anchor API
 * # Introduction This document discusses Klaytn API Service (KAS) Anchor API. Anchor API features functions for sending metadata to prove data reliability and ensuring the reliability of service chain data to the Klaytn main chain.     # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1071010 | data don't exist 1071615 | its value is out of range; size 1072100 | same payload ID or payload was already anchored 1072101 | all configured accounts have insufficient funds |   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../../ApiClient'))
    } else {
        // Browser globals (root is window)
        if (!root.AnchorApi) {
            root.AnchorApi = {}
        }
        root.AnchorApi.AnchorTransaction = factory(root.AnchorApi.ApiClient)
    }
})(this, function(ApiClient) {
    /**
     * The AnchorTransaction model module.
     * @class AnchorTransaction
     * @version 1.0
     */

    /**
     * Constructs a new <code>AnchorTransaction</code>.
     * Anchoring transaction information
     * @alias AnchorTransaction
     * @class
     * @param createdAt {Number} Anchoring transaction creation time
     * @param payloadId {String} Payload ID
     * @param transactionHash {String} Transaction hash of anchoring transaction
     */
    const AnchorTransaction = function(createdAt, payloadId, transactionHash) {
        this.createdAt = createdAt
        this.payloadId = payloadId
        this.transactionHash = transactionHash
    }

    /**
     * Constructs a <code>AnchorTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {AnchorTransaction} obj Optional instance to populate.
     * @return {AnchorTransaction} The populated <code>AnchorTransaction</code> instance.
     * @memberof AnchorTransaction
     */
    AnchorTransaction.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new AnchorTransaction()
            if (data.hasOwnProperty('createdAt')) obj.createdAt = ApiClient.convertToType(data.createdAt, 'Number')
            if (data.hasOwnProperty('payloadId')) obj.payloadId = ApiClient.convertToType(data.payloadId, 'String')
            if (data.hasOwnProperty('transactionHash')) obj.transactionHash = ApiClient.convertToType(data.transactionHash, 'String')
        }
        return obj
    }

    /**
     * Anchoring transaction creation time
     * @type {Number}
     * @memberof AnchorTransaction
     */
    AnchorTransaction.prototype.createdAt = undefined

    /**
     * Payload ID
     * @type {String}
     * @memberof AnchorTransaction
     */
    AnchorTransaction.prototype.payloadId = undefined

    /**
     * Transaction hash of anchoring transaction
     * @type {String}
     * @memberof AnchorTransaction
     */
    AnchorTransaction.prototype.transactionHash = undefined

    return AnchorTransaction
})
